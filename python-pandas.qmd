---
title: Introduction to Python and Pandas
author: Robin Warner, Kevin Nota, and Maxime Borry
---

:::  {.callout-note} 
This session is typically ran held in parallel to the Introduction to R and Tidyverse. Participants of the summer schools chose which to attend based on their prior experience. We recommend the [introduction to R session](r-tidyverse.qmd) if you have no experience with neither R nor Python.
:::

::: {.callout-tip}
For this chapter's exercises, if not already performed, you will need to create the [conda environment](before-you-start.qmd#creating-a-conda-environment) from the `yml` file in the following [link](https://github.com/SPAAM-community/intro-to-ancient-metagenomics-book/raw/main/assets/envs/python-pandas.yml) (right click and save as to download), and once created, activate the environment with:

```bash
conda activate python-pandas
```
:::


## Lecture

Lecture slides and video from the [2022 edition of the summer school](https://www.spaam-community.org/wss-summer-school/#/2022/README).

<iframe src="assets/slides/python-pandas/tutorial.slides.html" frameborder="0" width="100%" height="400px" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>

PDF version of these slides can be downloaded from [here](https://github.com/SPAAM-community/wss-summer-school/raw/main/docs/assets/slides/2022/3b2-python-pandas/SPAAM%20Summer%20School%202022%20-%203B2%20-%20Intro%20to%20Python%20and%20Pandas.pdf).

This session is run using a Jupyter notebook. This can be found [here](https://github.com/maxibor/intro-to-pandas-plotnine). However, it will already be installed on compute nodes during the summer school.

<iframe width="100%" height="400px" src="https://www.youtube.com/embed/V_EKs_zlO1w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

::: {.callout-warning}
We highly recommend viewing this walkthrough via the Jupyter notebook above!
The output of commands on the website for this walkthrough are displayed in their
own code blocks - be wary of what you copy-paste!
:::

```python
from IPython.core.display import SVG
```

## Introduction to data manipulation in Python with Pandas and visulization with plotnine

Maxime Borry  
SPAAM Summer School 2022

```python
SVG(filename='img/whoami.svg')
```

![svg](assets/images/chapters/python-pandas/tutorial_2_0.svg)

Over the last few years, Python has gained an immense amount of popularity thanks to its numerous libraries in the field of machine learning, statistical data analysis, and bioinformatics. While a few years ago, it was often necessary to go back to R for performing routine data manipulation and analysis tasks, nowadays Python has a vast ecosystem of libraries for doing just that.

Today, we will do a quick introduction of the most popular libraries for data analysis:

- [pandas](https://pandas.pydata.org/), for reading and manipulation tabular data
- [plotnine](https://plotnine.readthedocs.io/), the Python clone of ggplot2

## Overview:

- 0 - Foreword, working in a jupyter environment
- 1 - Loading required libraries
- 2 - Foreword on Pandas
- 3 - Reading data with Pandas
- 4 - Dealing with missing data
- 5 - Computing basic statistics
- 6 - Filtering
- 8 - GroupBy operations
- 9 - Joining different tables
- 10 - Visualization with Plotnine

## 0 - Foreword, working in a jupyter environment

### This is a markdown cell

With some features of the markdown syntax, such as:

- **bold** `**bold**`
- _italic_ `*italic*`
- `inline code`

```
`inline code`
```

- [links](https://www.google.com/) `[links](https://www.google.com/)`

- Images  
  ![](assets/images/chapters/python-pandas/avatar_hu4dc3c23d5a8c195732bbca11d7ce61be_114670_270x270_fill_lanczos_center_2.png)  
  `![](https://maximeborry.com/authors/maxime/avatar_hu4dc3c23d5a8c195732bbca11d7ce61be_114670_270x270_fill_lanczos_center_2.png)`

- Latex code $ y = ax + b$  
  `$y = ax + b$`

```python
print("This is a code cell in Python")
```

    This is a code cell in Python

```python
! echo "This is code cell in bash"
```

    This is code cell in bash

```bash
%%bash

echo "This a multiline code cell"
echo "in bash"
```

    This a multiline code cell
    in bash

## 1 - Loading required libraries

```python
import pandas as pd
import numpy as np
from plotnine import *
```

```python
pd.__version__
```

    '1.4.3'

```python
np.__version__
```

    '1.23.1'

```python
! conda list | grep plotnine
```

    plotnine                  0.9.0              pyhd8ed1ab_0    conda-forge

## 2 - Foreword on Pandas

### Pandas terminology

![](assets/images/chapters/python-pandas/01_table_dataframe.svg)

![](assets/images/chapters/python-pandas/01_table_series.svg)

The pandas getting started tutorial: [pandas.pydata.org/docs/getting_started](https://pandas.pydata.org/docs/getting_started/index.html#)

## 3 - Reading data with Pandas

```python
sample_table_url = "https://raw.githubusercontent.com/SPAAM-community/AncientMetagenomeDir/b187df6ebd23dfeb42935fd5020cb615ead3f164/
ancientmetagenome-hostassociated/samples/ancientmetagenome-hostassociated_samples.tsv"
library_table_url = "https://raw.githubusercontent.com/SPAAM-community/AncientMetagenomeDir/b187df6ebd23dfeb42935fd5020cb615ead3f164/
ancientmetagenome-hostassociated/libraries/ancientmetagenome-hostassociated_libraries.tsv"
```

Getting help in Python

```python
help(pd.read_csv)
```

    Help on function read_csv in module pandas.io.parsers.readers:

    read_csv(filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]',
    sep=<no_default>, delimiter=None, header='infer', names=<no_default>, index_col=None,
    usecols=None, squeeze=None, prefix=<no_default>, mangle_dupe_cols=True,
    dtype: 'DtypeArg | None' = None, engine: 'CSVEngine | None' = None, converters=None,
    true_values=None, false_values=None, skipinitialspace=False, skiprows=None, skipfooter=0,
    nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False,
    skip_blank_lines=True, parse_dates=None, infer_datetime_format=False, keep_date_col=False,
     date_parser=None, dayfirst=False, cache_dates=True, iterator=False, chunksize=None,
     compression: 'CompressionOptions' = 'infer', thousands=None, decimal: 'str' = '.',
     lineterminator=None, quotechar='"', quoting=0, doublequote=True, escapechar=None,
     comment=None, encoding=None, encoding_errors: 'str | None' = 'strict', dialect=None,
     error_bad_lines=None, warn_bad_lines=None, on_bad_lines=None, delim_whitespace=False,
     low_memory=True, memory_map=False, float_precision=None, storage_options: 'StorageOptions' = None)
        Read a comma-separated values (csv) file into DataFrame.

        Also supports optionally iterating or breaking of the file
        into chunks.

        Additional help can be found in the online docs for
        `IO Tools <https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html>`_.

        Parameters
        ----------
        filepath_or_buffer : str, path object or file-like object
            Any valid string path is acceptable. The string could be a URL. Valid
            URL schemes include http, ftp, s3, gs, and file. For file URLs, a host is
            expected. A local file could be: file://localhost/path/to/table.csv.

            If you want to pass in a path object, pandas accepts any ``os.PathLike``.

            By file-like object, we refer to objects with a ``read()`` method, such as
            a file handle (e.g. via builtin ``open`` function) or ``StringIO``.
        sep : str, default ','
            Delimiter to use. If sep is None, the C engine cannot automatically detect
            the separator, but the Python parsing engine can, meaning the latter will
            be used and automatically detect the separator by Python's builtin sniffer
            tool, ``csv.Sniffer``. In addition, separators longer than 1 character and
            different from ``'\s+'`` will be interpreted as regular expressions and
            will also force the use of the Python parsing engine. Note that regex
            delimiters are prone to ignoring quoted data. Regex example: ``'\r\t'``.
        delimiter : str, default ``None``
            Alias for sep.
        header : int, list of int, None, default 'infer'
            Row number(s) to use as the column names, and the start of the
            data.  Default behavior is to infer the column names: if no names
            are passed the behavior is identical to ``header=0`` and column
            names are inferred from the first line of the file, if column
            names are passed explicitly then the behavior is identical to
            ``header=None``. Explicitly pass ``header=0`` to be able to
            replace existing names. The header can be a list of integers that
            specify row locations for a multi-index on the columns
            e.g. [0,1,3]. Intervening rows that are not specified will be
            skipped (e.g. 2 in this example is skipped). Note that this
            parameter ignores commented lines and empty lines if
            ``skip_blank_lines=True``, so ``header=0`` denotes the first line of
            data rather than the first line of the file.
        names : array-like, optional
            List of column names to use. If the file contains a header row,
            then you should explicitly pass ``header=0`` to override the column names.
            Duplicates in this list are not allowed.
        index_col : int, str, sequence of int / str, or False, optional, default ``None``
          Column(s) to use as the row labels of the ``DataFrame``, either given as
          string name or column index. If a sequence of int / str is given, a
          MultiIndex is used.

          Note: ``index_col=False`` can be used to force pandas to *not* use the first
          column as the index, e.g. when you have a malformed file with delimiters at
          the end of each line.
        usecols : list-like or callable, optional
            Return a subset of the columns. If list-like, all elements must either
            be positional (i.e. integer indices into the document columns) or strings
            that correspond to column names provided either by the user in `names` or
            inferred from the document header row(s). If ``names`` are given, the document
            header row(s) are not taken into account. For example, a valid list-like
            `usecols` parameter would be ``[0, 1, 2]`` or ``['foo', 'bar', 'baz']``.
            Element order is ignored, so ``usecols=[0, 1]`` is the same as ``[1, 0]``.
            To instantiate a DataFrame from ``data`` with element order preserved use
            ``pd.read_csv(data, usecols=['foo', 'bar'])[['foo', 'bar']]`` for columns
            in ``['foo', 'bar']`` order or
            ``pd.read_csv(data, usecols=['foo', 'bar'])[['bar', 'foo']]``
            for ``['bar', 'foo']`` order.

            If callable, the callable function will be evaluated against the column
            names, returning names where the callable function evaluates to True. An
            example of a valid callable argument would be ``lambda x: x.upper() in
            ['AAA', 'BBB', 'DDD']``. Using this parameter results in much faster
            parsing time and lower memory usage.
        squeeze : bool, default False
            If the parsed data only contains one column then return a Series.

            .. deprecated:: 1.4.0
                Append ``.squeeze("columns")`` to the call to ``read_csv`` to squeeze
                the data.
        prefix : str, optional
            Prefix to add to column numbers when no header, e.g. 'X' for X0, X1, ...

            .. deprecated:: 1.4.0
               Use a list comprehension on the DataFrame's columns after calling ``read_csv``.
        mangle_dupe_cols : bool, default True
            Duplicate columns will be specified as 'X', 'X.1', ...'X.N', rather than
            'X'...'X'. Passing in False will cause data to be overwritten if there
            are duplicate names in the columns.
        dtype : Type name or dict of column -> type, optional
            Data type for data or columns. E.g. {'a': np.float64, 'b': np.int32,
            'c': 'Int64'}
            Use `str` or `object` together with suitable `na_values` settings
            to preserve and not interpret dtype.
            If converters are specified, they will be applied INSTEAD
            of dtype conversion.
        engine : {'c', 'python', 'pyarrow'}, optional
            Parser engine to use. The C and pyarrow engines are faster, while the python engine
            is currently more feature-complete. Multithreading is currently only supported by
            the pyarrow engine.

            .. versionadded:: 1.4.0

                The "pyarrow" engine was added as an *experimental* engine, and some features
                are unsupported, or may not work correctly, with this engine.
        converters : dict, optional
            Dict of functions for converting values in certain columns. Keys can either
            be integers or column labels.
        true_values : list, optional
            Values to consider as True.
        false_values : list, optional
            Values to consider as False.
        skipinitialspace : bool, default False
            Skip spaces after delimiter.
        skiprows : list-like, int or callable, optional
            Line numbers to skip (0-indexed) or number of lines to skip (int)
            at the start of the file.

            If callable, the callable function will be evaluated against the row
            indices, returning True if the row should be skipped and False otherwise.
            An example of a valid callable argument would be ``lambda x: x in [0, 2]``.
        skipfooter : int, default 0
            Number of lines at bottom of file to skip (Unsupported with engine='c').
        nrows : int, optional
            Number of rows of file to read. Useful for reading pieces of large files.
        na_values : scalar, str, list-like, or dict, optional
            Additional strings to recognize as NA/NaN. If dict passed, specific
            per-column NA values.  By default the following values are interpreted as
            NaN: '', '#N/A', '#N/A N/A', '#NA', '-1.#IND', '-1.#QNAN', '-NaN', '-nan',
            '1.#IND', '1.#QNAN', '<NA>', 'N/A', 'NA', 'NULL', 'NaN', 'n/a',
            'nan', 'null'.
        keep_default_na : bool, default True
            Whether or not to include the default NaN values when parsing the data.
            Depending on whether `na_values` is passed in, the behavior is as follows:

            * If `keep_default_na` is True, and `na_values` are specified, `na_values`
              is appended to the default NaN values used for parsing.
            * If `keep_default_na` is True, and `na_values` are not specified, only
              the default NaN values are used for parsing.
            * If `keep_default_na` is False, and `na_values` are specified, only
              the NaN values specified `na_values` are used for parsing.
            * If `keep_default_na` is False, and `na_values` are not specified, no
              strings will be parsed as NaN.

            Note that if `na_filter` is passed in as False, the `keep_default_na` and
            `na_values` parameters will be ignored.
        na_filter : bool, default True
            Detect missing value markers (empty strings and the value of na_values). In
            data without any NAs, passing na_filter=False can improve the performance
            of reading a large file.
        verbose : bool, default False
            Indicate number of NA values placed in non-numeric columns.
        skip_blank_lines : bool, default True
            If True, skip over blank lines rather than interpreting as NaN values.
        parse_dates : bool or list of int or names or list of lists or dict, default False
            The behavior is as follows:

            * boolean. If True -> try parsing the index.
            * list of int or names. e.g. If [1, 2, 3] -> try parsing columns 1, 2, 3
              each as a separate date column.
            * list of lists. e.g.  If [[1, 3]] -> combine columns 1 and 3 and parse as
              a single date column.
            * dict, e.g. {'foo' : [1, 3]} -> parse columns 1, 3 as date and call
              result 'foo'

            If a column or index cannot be represented as an array of datetimes,
            say because of an unparsable value or a mixture of timezones, the column
            or index will be returned unaltered as an object data type. For
            non-standard datetime parsing, use ``pd.to_datetime`` after
            ``pd.read_csv``. To parse an index or column with a mixture of timezones,
            specify ``date_parser`` to be a partially-applied
            :func:`pandas.to_datetime` with ``utc=True``. See
            :ref:`io.csv.mixed_timezones` for more.

            Note: A fast-path exists for iso8601-formatted dates.
        infer_datetime_format : bool, default False
            If True and `parse_dates` is enabled, pandas will attempt to infer the
            format of the datetime strings in the columns, and if it can be inferred,
            switch to a faster method of parsing them. In some cases this can increase
            the parsing speed by 5-10x.
        keep_date_col : bool, default False
            If True and `parse_dates` specifies combining multiple columns then
            keep the original columns.
        date_parser : function, optional
            Function to use for converting a sequence of string columns to an array of
            datetime instances. The default uses ``dateutil.parser.parser`` to do the
            conversion. Pandas will try to call `date_parser` in three different ways,
            advancing to the next if an exception occurs: 1) Pass one or more arrays
            (as defined by `parse_dates`) as arguments; 2) concatenate (row-wise) the
            string values from the columns defined by `parse_dates` into a single array
            and pass that; and 3) call `date_parser` once for each row using one or
            more strings (corresponding to the columns defined by `parse_dates`) as
            arguments.
        dayfirst : bool, default False
            DD/MM format dates, international and European format.
        cache_dates : bool, default True
            If True, use a cache of unique, converted dates to apply the datetime
            conversion. May produce significant speed-up when parsing duplicate
            date strings, especially ones with timezone offsets.

            .. versionadded:: 0.25.0
        iterator : bool, default False
            Return TextFileReader object for iteration or getting chunks with
            ``get_chunk()``.

            .. versionchanged:: 1.2

               ``TextFileReader`` is a context manager.
        chunksize : int, optional
            Return TextFileReader object for iteration.
            See the `IO Tools docs
            <https://pandas.pydata.org/pandas-docs/stable/io.html#io-chunking>`_
            for more information on ``iterator`` and ``chunksize``.

            .. versionchanged:: 1.2

               ``TextFileReader`` is a context manager.
        compression : str or dict, default 'infer'
            For on-the-fly decompression of on-disk data. If 'infer' and '%s' is
            path-like, then detect compression from the following extensions: '.gz',
            '.bz2', '.zip', '.xz', or '.zst' (otherwise no compression). If using
            'zip', the ZIP file must contain only one data file to be read in. Set to
            ``None`` for no decompression. Can also be a dict with key ``'method'`` set
            to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``} and other
            key-value pairs are forwarded to ``zipfile.ZipFile``, ``gzip.GzipFile``,
            ``bz2.BZ2File``, or ``zstandard.ZstdDecompressor``, respectively. As an
            example, the following could be passed for Zstandard decompression using a
            custom compression dictionary:
            ``compression={'method': 'zstd', 'dict_data': my_compression_dict}``.

            .. versionchanged:: 1.4.0 Zstandard support.

        thousands : str, optional
            Thousands separator.
        decimal : str, default '.'
            Character to recognize as decimal point (e.g. use ',' for European data).
        lineterminator : str (length 1), optional
            Character to break file into lines. Only valid with C parser.
        quotechar : str (length 1), optional
            The character used to denote the start and end of a quoted item. Quoted
            items can include the delimiter and it will be ignored.
        quoting : int or csv.QUOTE_* instance, default 0
            Control field quoting behavior per ``csv.QUOTE_*`` constants. Use one of
            QUOTE_MINIMAL (0), QUOTE_ALL (1), QUOTE_NONNUMERIC (2) or QUOTE_NONE (3).
        doublequote : bool, default ``True``
           When quotechar is specified and quoting is not ``QUOTE_NONE``, indicate
           whether or not to interpret two consecutive quotechar elements INSIDE a
           field as a single ``quotechar`` element.
        escapechar : str (length 1), optional
            One-character string used to escape other characters.
        comment : str, optional
            Indicates remainder of line should not be parsed. If found at the beginning
            of a line, the line will be ignored altogether. This parameter must be a
            single character. Like empty lines (as long as ``skip_blank_lines=True``),
            fully commented lines are ignored by the parameter `header` but not by
            `skiprows`. For example, if ``comment='#'``, parsing
            ``#empty\na,b,c\n1,2,3`` with ``header=0`` will result in 'a,b,c' being
            treated as the header.
        encoding : str, optional
            Encoding to use for UTF when reading/writing (ex. 'utf-8'). `List of Python
            standard encodings
            <https://docs.python.org/3/library/codecs.html#standard-encodings>`_ .

            .. versionchanged:: 1.2

               When ``encoding`` is ``None``, ``errors="replace"`` is passed to
               ``open()``. Otherwise, ``errors="strict"`` is passed to ``open()``.
               This behavior was previously only the case for ``engine="python"``.

            .. versionchanged:: 1.3.0

               ``encoding_errors`` is a new argument. ``encoding`` has no longer an
               influence on how encoding errors are handled.

        encoding_errors : str, optional, default "strict"
            How encoding errors are treated. `List of possible values
            <https://docs.python.org/3/library/codecs.html#error-handlers>`_ .

            .. versionadded:: 1.3.0

        dialect : str or csv.Dialect, optional
            If provided, this parameter will override values (default or not) for the
            following parameters: `delimiter`, `doublequote`, `escapechar`,
            `skipinitialspace`, `quotechar`, and `quoting`. If it is necessary to
            override values, a ParserWarning will be issued. See csv.Dialect
            documentation for more details.
        error_bad_lines : bool, optional, default ``None``
            Lines with too many fields (e.g. a csv line with too many commas) will by
            default cause an exception to be raised, and no DataFrame will be returned.
            If False, then these "bad lines" will be dropped from the DataFrame that is
            returned.

            .. deprecated:: 1.3.0
               The ``on_bad_lines`` parameter should be used instead to specify behavior upon
               encountering a bad line instead.
        warn_bad_lines : bool, optional, default ``None``
            If error_bad_lines is False, and warn_bad_lines is True, a warning for each
            "bad line" will be output.

            .. deprecated:: 1.3.0
               The ``on_bad_lines`` parameter should be used instead to specify behavior upon
               encountering a bad line instead.
        on_bad_lines : {'error', 'warn', 'skip'} or callable, default 'error'
            Specifies what to do upon encountering a bad line (a line with too many fields).
            Allowed values are :

                - 'error', raise an Exception when a bad line is encountered.
                - 'warn', raise a warning when a bad line is encountered and skip that line.
                - 'skip', skip bad lines without raising or warning when they are encountered.

            .. versionadded:: 1.3.0

                - callable, function with signature
                  ``(bad_line: list[str]) -> list[str] | None`` that will process a single
                  bad line. ``bad_line`` is a list of strings split by the ``sep``.
                  If the function returns ``None``, the bad line will be ignored.
                  If the function returns a new list of strings with more elements than
                  expected, a ``ParserWarning`` will be emitted while dropping extra elements.
                  Only supported when ``engine="python"``

            .. versionadded:: 1.4.0

        delim_whitespace : bool, default False
            Specifies whether or not whitespace (e.g. ``' '`` or ``'    '``) will be
            used as the sep. Equivalent to setting ``sep='\s+'``. If this option
            is set to True, nothing should be passed in for the ``delimiter``
            parameter.
        low_memory : bool, default True
            Internally process the file in chunks, resulting in lower memory use
            while parsing, but possibly mixed type inference.  To ensure no mixed
            types either set False, or specify the type with the `dtype` parameter.
            Note that the entire file is read into a single DataFrame regardless,
            use the `chunksize` or `iterator` parameter to return the data in chunks.
            (Only valid with C parser).
        memory_map : bool, default False
            If a filepath is provided for `filepath_or_buffer`, map the file object
            directly onto memory and access the data directly from there. Using this
            option can improve performance because there is no longer any I/O overhead.
        float_precision : str, optional
            Specifies which converter the C engine should use for floating-point
            values. The options are ``None`` or 'high' for the ordinary converter,
            'legacy' for the original lower precision pandas converter, and
            'round_trip' for the round-trip converter.

            .. versionchanged:: 1.2

        storage_options : dict, optional
            Extra options that make sense for a particular storage connection, e.g.
            host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
            are forwarded to ``urllib`` as header options. For other URLs (e.g.
            starting with "s3://", and "gcs://") the key-value pairs are forwarded to
            ``fsspec``. Please see ``fsspec`` and ``urllib`` for more details.

            .. versionadded:: 1.2

        Returns
        -------
        DataFrame or TextParser
            A comma-separated values (csv) file is returned as two-dimensional
            data structure with labeled axes.

        See Also
        --------
        DataFrame.to_csv : Write DataFrame to a comma-separated values (csv) file.
        read_csv : Read a comma-separated values (csv) file into DataFrame.
        read_fwf : Read a table of fixed-width formatted lines into DataFrame.

        Examples
        --------
        >>> pd.read_csv('data.csv')  # doctest: +SKIP

```python
sample_df = pd.read_csv(sample_table_url, sep="\t")
library_df = pd.read_csv(library_table_url, sep="\t")
```

```python
sample_df.project_name.nunique()
```

    45

```python
library_df.project_name.nunique()
```

    43

### Listing the columns of the sample dataframe

```python
sample_df.columns
```

    Index(['project_name', 'publication_year', 'publication_doi', 'site_name',
           'latitude', 'longitude', 'geo_loc_name', 'sample_name', 'sample_host',
           'sample_age', 'sample_age_doi', 'community_type', 'material', 'archive',
           'archive_project', 'archive_accession'],
          dtype='object')

### Looking at the data type of the sample dataframe

```python
sample_df.dtypes
```

    project_name          object
    publication_year       int64
    publication_doi       object
    site_name             object
    latitude             float64
    longitude            float64
    geo_loc_name          object
    sample_name           object
    sample_host           object
    sample_age             int64
    sample_age_doi        object
    community_type        object
    material              object
    archive               object
    archive_project       object
    archive_accession     object
    dtype: object

- `int64` is for integers
- `floating64` is for floating point precision numbers, also known as double in some other programing languages
- `object` is a general type in pandas for everything that is not a number, interval, categorical, or date

### Let's inspect our data

What is the size of our dataframe ?

```python
sample_df.shape
```

    (1060, 16)

This dataframe has **1060** rows, and **16** columns

Let's look at the first 5 rows

```python
sample_df.head()
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>project_name</th>
      <th>publication_year</th>
      <th>publication_doi</th>
      <th>site_name</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>geo_loc_name</th>
      <th>sample_name</th>
      <th>sample_host</th>
      <th>sample_age</th>
      <th>sample_age_doi</th>
      <th>community_type</th>
      <th>material</th>
      <th>archive</th>
      <th>archive_project</th>
      <th>archive_accession</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.840</td>
      <td>Germany</td>
      <td>B61</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473742,SRS473743,SRS473744,SRS473745</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.840</td>
      <td>Germany</td>
      <td>G12</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473747,SRS473746,SRS473748,SRS473749,SRS473750</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Weyrich2017</td>
      <td>2017</td>
      <td>10.1038/nature21674</td>
      <td>Gola Forest</td>
      <td>7.657</td>
      <td>-10.841</td>
      <td>Sierra Leone</td>
      <td>Chimp</td>
      <td>Pan troglodytes</td>
      <td>100</td>
      <td>10.1038/nature21674</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA685265</td>
      <td>SRS7890499</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Weyrich2017</td>
      <td>2017</td>
      <td>10.1038/nature21674</td>
      <td>El Sidrón Cave</td>
      <td>43.386</td>
      <td>-5.328</td>
      <td>Spain</td>
      <td>ElSidron1</td>
      <td>Homo sapiens neanderthalensis</td>
      <td>49000</td>
      <td>10.1038/nature21674</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA685265</td>
      <td>SRS7890498</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Weyrich2017</td>
      <td>2017</td>
      <td>10.1038/nature21674</td>
      <td>El Sidrón Cave</td>
      <td>43.386</td>
      <td>-5.329</td>
      <td>Spain</td>
      <td>ElSidron2</td>
      <td>Homo sapiens neanderthalensis</td>
      <td>49000</td>
      <td>10.1038/nature21674</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA685265</td>
      <td>SRS7890496</td>
    </tr>
  </tbody>
</table>
</div>

**Unlike R, Python is `0` based language, meaning the first element is of index `0`, not like R where it is `1`.**

Let's look at the last 5 rows

```python
sample_df.tail()
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>project_name</th>
      <th>publication_year</th>
      <th>publication_doi</th>
      <th>site_name</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>geo_loc_name</th>
      <th>sample_name</th>
      <th>sample_host</th>
      <th>sample_age</th>
      <th>sample_age_doi</th>
      <th>community_type</th>
      <th>material</th>
      <th>archive</th>
      <th>archive_project</th>
      <th>archive_accession</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1055</th>
      <td>Kazarina2021b</td>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>St. Gertrude’s Church, Riga</td>
      <td>56.958</td>
      <td>24.121</td>
      <td>Latvia</td>
      <td>T2</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283094,ERS7283095</td>
    </tr>
    <tr>
      <th>1056</th>
      <td>Kazarina2021b</td>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>St. Gertrude’s Church, Riga</td>
      <td>56.958</td>
      <td>24.121</td>
      <td>Latvia</td>
      <td>T3</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283096,ERS7283097</td>
    </tr>
    <tr>
      <th>1057</th>
      <td>Kazarina2021b</td>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>St. Gertrude’s Church, Riga</td>
      <td>56.958</td>
      <td>24.121</td>
      <td>Latvia</td>
      <td>T9</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283098,ERS7283099</td>
    </tr>
    <tr>
      <th>1058</th>
      <td>Kazarina2021b</td>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>Dom Square, Riga</td>
      <td>56.949</td>
      <td>24.104</td>
      <td>Latvia</td>
      <td>TZA3</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283100,ERS7283101</td>
    </tr>
    <tr>
      <th>1059</th>
      <td>Kazarina2021b</td>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>St. Peter’s Church, Riga</td>
      <td>56.947</td>
      <td>24.109</td>
      <td>Latvia</td>
      <td>TZA4</td>
      <td>Homo sapiens</td>
      <td>500</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283102,ERS7283103</td>
    </tr>
  </tbody>
</table>
</div>

Let's randomly inspect 5 rows

```python
sample_df.sample(n=5)
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>project_name</th>
      <th>publication_year</th>
      <th>publication_doi</th>
      <th>site_name</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>geo_loc_name</th>
      <th>sample_name</th>
      <th>sample_host</th>
      <th>sample_age</th>
      <th>sample_age_doi</th>
      <th>community_type</th>
      <th>material</th>
      <th>archive</th>
      <th>archive_project</th>
      <th>archive_accession</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>413</th>
      <td>Neukamm2020</td>
      <td>2020</td>
      <td>10.1186/s12915-020-00839-8</td>
      <td>Abusir el-Meleq</td>
      <td>29.240</td>
      <td>31.100</td>
      <td>Egypt</td>
      <td>Abusir1576</td>
      <td>Homo sapiens</td>
      <td>2200</td>
      <td>10.1038/ncomms15694</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>ENA</td>
      <td>PRJEB33848</td>
      <td>ERS3635981</td>
    </tr>
    <tr>
      <th>754</th>
      <td>Rampelli2021</td>
      <td>2021</td>
      <td>10.1038/s42003-021-01689-y</td>
      <td>El Salt</td>
      <td>38.687</td>
      <td>-0.508</td>
      <td>Spain</td>
      <td>V3</td>
      <td>Homo sapiens neanderthalensis</td>
      <td>44700</td>
      <td>10.1038/s42003-021-01689-y</td>
      <td>gut</td>
      <td>sediment</td>
      <td>ENA</td>
      <td>PRJEB41665</td>
      <td>ERS5428042</td>
    </tr>
    <tr>
      <th>436</th>
      <td>Neukamm2020</td>
      <td>2020</td>
      <td>10.1186/s12915-020-00839-8</td>
      <td>Abusir el-Meleq</td>
      <td>29.240</td>
      <td>31.100</td>
      <td>Egypt</td>
      <td>Abusir1606</td>
      <td>Homo sapiens</td>
      <td>2600</td>
      <td>10.1186/s12915-020-00839-8</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>ENA</td>
      <td>PRJEB33848</td>
      <td>ERS3635928</td>
    </tr>
    <tr>
      <th>474</th>
      <td>Neukamm2020</td>
      <td>2020</td>
      <td>10.1186/s12915-020-00839-8</td>
      <td>Abusir el-Meleq</td>
      <td>29.240</td>
      <td>31.100</td>
      <td>Egypt</td>
      <td>Abusir1654</td>
      <td>Homo sapiens</td>
      <td>2300</td>
      <td>10.1038/ncomms15694</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB33848</td>
      <td>ERS3635960</td>
    </tr>
    <tr>
      <th>573</th>
      <td>Philips2017</td>
      <td>2017</td>
      <td>10.1186/s12864-020-06810-9</td>
      <td>Kowalewko</td>
      <td>52.699</td>
      <td>17.605</td>
      <td>Poland</td>
      <td>PCA0040</td>
      <td>Homo sapiens</td>
      <td>1900</td>
      <td>10.1186/s12864-020-06810-9</td>
      <td>oral</td>
      <td>tooth</td>
      <td>SRA</td>
      <td>PRJNA354503</td>
      <td>SRS1815407</td>
    </tr>
  </tbody>
</table>
</div>

###### Accessing the data by index/columns

The are different way of selecting of subset of a dataframe

Selecting by the row index

```python
# selecting the 10th row, and all columns
sample_df.iloc[9, :]
```

    project_name                    Weyrich2017
    publication_year                       2017
    publication_doi         10.1038/nature21674
    site_name            Stuttgart-Mühlhausen I
    latitude                             48.839
    longitude                             9.227
    geo_loc_name                        Germany
    sample_name                        EuroLBK1
    sample_host                    Homo sapiens
    sample_age                             7400
    sample_age_doi          10.1038/nature21674
    community_type                         oral
    material                    dental calculus
    archive                                 SRA
    archive_project                 PRJNA685265
    archive_accession                SRS7890488
    Name: 9, dtype: object

```python
# selecting the 10th to 12th row, and all columns
sample_df.iloc[9:12, :]
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>project_name</th>
      <th>publication_year</th>
      <th>publication_doi</th>
      <th>site_name</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>geo_loc_name</th>
      <th>sample_name</th>
      <th>sample_host</th>
      <th>sample_age</th>
      <th>sample_age_doi</th>
      <th>community_type</th>
      <th>material</th>
      <th>archive</th>
      <th>archive_project</th>
      <th>archive_accession</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>9</th>
      <td>Weyrich2017</td>
      <td>2017</td>
      <td>10.1038/nature21674</td>
      <td>Stuttgart-Mühlhausen I</td>
      <td>48.839</td>
      <td>9.227</td>
      <td>Germany</td>
      <td>EuroLBK1</td>
      <td>Homo sapiens</td>
      <td>7400</td>
      <td>10.1038/nature21674</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA685265</td>
      <td>SRS7890488</td>
    </tr>
    <tr>
      <th>10</th>
      <td>Weyrich2017</td>
      <td>2017</td>
      <td>10.1038/nature21674</td>
      <td>Stuttgart-Mühlhausen I</td>
      <td>48.839</td>
      <td>9.227</td>
      <td>Germany</td>
      <td>EuroLBK2</td>
      <td>Homo sapiens</td>
      <td>7400</td>
      <td>10.1038/nature21674</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA685265</td>
      <td>SRS7890485</td>
    </tr>
    <tr>
      <th>11</th>
      <td>Weyrich2017</td>
      <td>2017</td>
      <td>10.1038/nature21674</td>
      <td>Stuttgart-Mühlhausen I</td>
      <td>48.839</td>
      <td>9.227</td>
      <td>Germany</td>
      <td>EuroLBK3</td>
      <td>Homo sapiens</td>
      <td>7400</td>
      <td>10.1038/nature21674</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA685265</td>
      <td>SRS7890490</td>
    </tr>
  </tbody>
</table>
</div>

```python
# selecting the 10th to 12th row, and the first to the 4th column
sample_df.iloc[9:12, 0:4]
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>project_name</th>
      <th>publication_year</th>
      <th>publication_doi</th>
      <th>site_name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>9</th>
      <td>Weyrich2017</td>
      <td>2017</td>
      <td>10.1038/nature21674</td>
      <td>Stuttgart-Mühlhausen I</td>
    </tr>
    <tr>
      <th>10</th>
      <td>Weyrich2017</td>
      <td>2017</td>
      <td>10.1038/nature21674</td>
      <td>Stuttgart-Mühlhausen I</td>
    </tr>
    <tr>
      <th>11</th>
      <td>Weyrich2017</td>
      <td>2017</td>
      <td>10.1038/nature21674</td>
      <td>Stuttgart-Mühlhausen I</td>
    </tr>
  </tbody>
</table>
</div>

```python
# selecting the column site_name
sample_df['site_name']
```

    0                           Dalheim
    1                           Dalheim
    2                       Gola Forest
    3                    El Sidrón Cave
    4                    El Sidrón Cave
                       ...
    1055    St. Gertrude’s Church, Riga
    1056    St. Gertrude’s Church, Riga
    1057    St. Gertrude’s Church, Riga
    1058               Dom Square, Riga
    1059       St. Peter’s Church, Riga
    Name: site_name, Length: 1060, dtype: object

```python
# Also valid, but less preferred
sample_df.site_name
```

    0                           Dalheim
    1                           Dalheim
    2                       Gola Forest
    3                    El Sidrón Cave
    4                    El Sidrón Cave
                       ...
    1055    St. Gertrude’s Church, Riga
    1056    St. Gertrude’s Church, Riga
    1057    St. Gertrude’s Church, Riga
    1058               Dom Square, Riga
    1059       St. Peter’s Church, Riga
    Name: site_name, Length: 1060, dtype: object

```python
# Removing a row
sample_df.drop(0)
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>project_name</th>
      <th>publication_year</th>
      <th>publication_doi</th>
      <th>site_name</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>geo_loc_name</th>
      <th>sample_name</th>
      <th>sample_host</th>
      <th>sample_age</th>
      <th>sample_age_doi</th>
      <th>community_type</th>
      <th>material</th>
      <th>archive</th>
      <th>archive_project</th>
      <th>archive_accession</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.840</td>
      <td>Germany</td>
      <td>G12</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473747,SRS473746,SRS473748,SRS473749,SRS473750</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Weyrich2017</td>
      <td>2017</td>
      <td>10.1038/nature21674</td>
      <td>Gola Forest</td>
      <td>7.657</td>
      <td>-10.841</td>
      <td>Sierra Leone</td>
      <td>Chimp</td>
      <td>Pan troglodytes</td>
      <td>100</td>
      <td>10.1038/nature21674</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA685265</td>
      <td>SRS7890499</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Weyrich2017</td>
      <td>2017</td>
      <td>10.1038/nature21674</td>
      <td>El Sidrón Cave</td>
      <td>43.386</td>
      <td>-5.328</td>
      <td>Spain</td>
      <td>ElSidron1</td>
      <td>Homo sapiens neanderthalensis</td>
      <td>49000</td>
      <td>10.1038/nature21674</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA685265</td>
      <td>SRS7890498</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Weyrich2017</td>
      <td>2017</td>
      <td>10.1038/nature21674</td>
      <td>El Sidrón Cave</td>
      <td>43.386</td>
      <td>-5.329</td>
      <td>Spain</td>
      <td>ElSidron2</td>
      <td>Homo sapiens neanderthalensis</td>
      <td>49000</td>
      <td>10.1038/nature21674</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA685265</td>
      <td>SRS7890496</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Weyrich2017</td>
      <td>2017</td>
      <td>10.1038/nature21674</td>
      <td>Spy Cave</td>
      <td>50.480</td>
      <td>4.674</td>
      <td>Belgium</td>
      <td>Spy1</td>
      <td>Homo sapiens neanderthalensis</td>
      <td>35800</td>
      <td>10.1038/nature21674</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA685265</td>
      <td>SRS7890491</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1055</th>
      <td>Kazarina2021b</td>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>St. Gertrude’s Church, Riga</td>
      <td>56.958</td>
      <td>24.121</td>
      <td>Latvia</td>
      <td>T2</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283094,ERS7283095</td>
    </tr>
    <tr>
      <th>1056</th>
      <td>Kazarina2021b</td>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>St. Gertrude’s Church, Riga</td>
      <td>56.958</td>
      <td>24.121</td>
      <td>Latvia</td>
      <td>T3</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283096,ERS7283097</td>
    </tr>
    <tr>
      <th>1057</th>
      <td>Kazarina2021b</td>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>St. Gertrude’s Church, Riga</td>
      <td>56.958</td>
      <td>24.121</td>
      <td>Latvia</td>
      <td>T9</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283098,ERS7283099</td>
    </tr>
    <tr>
      <th>1058</th>
      <td>Kazarina2021b</td>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>Dom Square, Riga</td>
      <td>56.949</td>
      <td>24.104</td>
      <td>Latvia</td>
      <td>TZA3</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283100,ERS7283101</td>
    </tr>
    <tr>
      <th>1059</th>
      <td>Kazarina2021b</td>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>St. Peter’s Church, Riga</td>
      <td>56.947</td>
      <td>24.109</td>
      <td>Latvia</td>
      <td>TZA4</td>
      <td>Homo sapiens</td>
      <td>500</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283102,ERS7283103</td>
    </tr>
  </tbody>
</table>
<p>1059 rows × 16 columns</p>
</div>

```python
# Removing a columm
sample_df.drop('project_name', axis=1)
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>publication_year</th>
      <th>publication_doi</th>
      <th>site_name</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>geo_loc_name</th>
      <th>sample_name</th>
      <th>sample_host</th>
      <th>sample_age</th>
      <th>sample_age_doi</th>
      <th>community_type</th>
      <th>material</th>
      <th>archive</th>
      <th>archive_project</th>
      <th>archive_accession</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.840</td>
      <td>Germany</td>
      <td>B61</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473742,SRS473743,SRS473744,SRS473745</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.840</td>
      <td>Germany</td>
      <td>G12</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473747,SRS473746,SRS473748,SRS473749,SRS473750</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2017</td>
      <td>10.1038/nature21674</td>
      <td>Gola Forest</td>
      <td>7.657</td>
      <td>-10.841</td>
      <td>Sierra Leone</td>
      <td>Chimp</td>
      <td>Pan troglodytes</td>
      <td>100</td>
      <td>10.1038/nature21674</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA685265</td>
      <td>SRS7890499</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2017</td>
      <td>10.1038/nature21674</td>
      <td>El Sidrón Cave</td>
      <td>43.386</td>
      <td>-5.328</td>
      <td>Spain</td>
      <td>ElSidron1</td>
      <td>Homo sapiens neanderthalensis</td>
      <td>49000</td>
      <td>10.1038/nature21674</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA685265</td>
      <td>SRS7890498</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2017</td>
      <td>10.1038/nature21674</td>
      <td>El Sidrón Cave</td>
      <td>43.386</td>
      <td>-5.329</td>
      <td>Spain</td>
      <td>ElSidron2</td>
      <td>Homo sapiens neanderthalensis</td>
      <td>49000</td>
      <td>10.1038/nature21674</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA685265</td>
      <td>SRS7890496</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1055</th>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>St. Gertrude’s Church, Riga</td>
      <td>56.958</td>
      <td>24.121</td>
      <td>Latvia</td>
      <td>T2</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283094,ERS7283095</td>
    </tr>
    <tr>
      <th>1056</th>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>St. Gertrude’s Church, Riga</td>
      <td>56.958</td>
      <td>24.121</td>
      <td>Latvia</td>
      <td>T3</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283096,ERS7283097</td>
    </tr>
    <tr>
      <th>1057</th>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>St. Gertrude’s Church, Riga</td>
      <td>56.958</td>
      <td>24.121</td>
      <td>Latvia</td>
      <td>T9</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283098,ERS7283099</td>
    </tr>
    <tr>
      <th>1058</th>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>Dom Square, Riga</td>
      <td>56.949</td>
      <td>24.104</td>
      <td>Latvia</td>
      <td>TZA3</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283100,ERS7283101</td>
    </tr>
    <tr>
      <th>1059</th>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>St. Peter’s Church, Riga</td>
      <td>56.947</td>
      <td>24.109</td>
      <td>Latvia</td>
      <td>TZA4</td>
      <td>Homo sapiens</td>
      <td>500</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283102,ERS7283103</td>
    </tr>
  </tbody>
</table>
<p>1060 rows × 15 columns</p>
</div>

##### 4 - Dealing with missing data

Checking is some entries if the table have missing data (NA or NaN)

```python
sample_df.isna()
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>project_name</th>
      <th>publication_year</th>
      <th>publication_doi</th>
      <th>site_name</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>geo_loc_name</th>
      <th>sample_name</th>
      <th>sample_host</th>
      <th>sample_age</th>
      <th>sample_age_doi</th>
      <th>community_type</th>
      <th>material</th>
      <th>archive</th>
      <th>archive_project</th>
      <th>archive_accession</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>1</th>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>2</th>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>3</th>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>4</th>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1055</th>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>1056</th>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>1057</th>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>1058</th>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>1059</th>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
  </tbody>
</table>
<p>1060 rows × 16 columns</p>
</div>

```python
# making the sum by row - axis=1
sample_df.isna().sum(axis=1)
```

    0       0
    1       0
    2       0
    3       0
    4       0
           ..
    1055    0
    1056    0
    1057    0
    1058    0
    1059    0
    Length: 1060, dtype: int64

Sorting by decreasing order to check which rows have missing values

```python
sample_df.isna().sum(axis=1).sort_values(ascending=False)
```

    800     2
    962     2
    992     2
    801     2
    802     2
           ..
    362     0
    363     0
    364     0
    365     0
    1059    0
    Length: 1060, dtype: int64

```python
sample_df.iloc[800,:]
```

    project_name                         FellowsYates2021
    publication_year                                 2021
    publication_doi               10.1073/pnas.2021655118
    site_name                               Not specified
    latitude                                          NaN
    longitude                                         NaN
    geo_loc_name         Democratic Republic of the Congo
    sample_name                                  GDC002.A
    sample_host                   Gorilla gorilla gorilla
    sample_age                                        200
    sample_age_doi                10.1073/pnas.2021655118
    community_type                                   oral
    material                              dental calculus
    archive                                           ENA
    archive_project                            PRJEB34569
    archive_accession                          ERS3774403
    Name: 800, dtype: object

What to do now ? The ideal scenario would be to correct or impute the data.  
However, sometimes, the only thing we can do is remove the row with missing data, with the `.dropna() function`.  
Here, we're just going to ignore them, and deal with it individually if necessary

## 5 - Computing basic statistics

TLDR: use the `describe()` function, the equivalent of `summarize` in R

```python
sample_df.describe()
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>publication_year</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>sample_age</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>1060.000000</td>
      <td>1021.000000</td>
      <td>1021.000000</td>
      <td>1060.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>2019.377358</td>
      <td>40.600493</td>
      <td>3.749624</td>
      <td>3588.443396</td>
    </tr>
    <tr>
      <th>std</th>
      <td>1.633877</td>
      <td>18.469421</td>
      <td>43.790316</td>
      <td>9862.416855</td>
    </tr>
    <tr>
      <th>min</th>
      <td>2014.000000</td>
      <td>-34.030000</td>
      <td>-121.800000</td>
      <td>100.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>2018.000000</td>
      <td>29.240000</td>
      <td>-1.257000</td>
      <td>200.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>2020.000000</td>
      <td>45.450000</td>
      <td>14.381000</td>
      <td>1000.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>2021.000000</td>
      <td>52.699000</td>
      <td>23.892000</td>
      <td>2200.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>2021.000000</td>
      <td>79.000000</td>
      <td>159.346000</td>
      <td>102000.000000</td>
    </tr>
  </tbody>
</table>
</div>

Let's look at various individual summary statistics
We can run them on the whole dataframe (for `int` or `float` columns), or on a subset of columns

```python
sample_df.mean()
```

    /var/folders/1c/l1qb09f15jddsh65f6xv1n_r0000gp/T/ipykernel_69168/2260452167.py:1:
    FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None')
    is deprecated; in a future version this will raise TypeError.  Select only valid columns
    before calling the reduction.





    publication_year    2019.377358
    latitude              40.600493
    longitude              3.749624
    sample_age          3588.443396
    dtype: float64

```python
sample_df['publication_year'].describe()
```

    count    1060.000000
    mean     2019.377358
    std         1.633877
    min      2014.000000
    25%      2018.000000
    50%      2020.000000
    75%      2021.000000
    max      2021.000000
    Name: publication_year, dtype: float64

```python
# The average publication year
sample_df['publication_year'].mean()
```

    2019.377358490566

```python
# The median publication year
sample_df['publication_year'].median()
```

    2020.0

```python
# The minimum, or oldest publication year
sample_df['publication_year'].min()
```

    2014

```python
# The maximum, or most recent publication year
sample_df['publication_year'].max()
```

    2021

```python
# The number of sites
sample_df['site_name'].nunique()
```

    246

```python
# The number of samples from the different hosts
sample_df['sample_host'].value_counts()
```

    Homo sapiens                      741
    Ursus arctos                       85
    Ambrosia artemisiifolia            46
    Arabidopsis thaliana               34
    Homo sapiens neanderthalensis      32
    Pan troglodytes schweinfurthii     26
    Gorilla beringei beringei          15
    Canis lupus                        12
    Gorilla gorilla gorilla             8
    Mammuthus primigenius               8
    Pan troglodytes verus               7
    Rangifer tarandus                   6
    Gorilla beringei graueri            6
    Pan troglodytes ellioti             6
    Papio hamadryas                     5
    Alouatta palliata                   5
    Conepatus chinga                    4
    Gerbilliscus boehmi                 4
    Strigocuscus celebensis             4
    Papio anubis                        2
    Gorilla beringei                    2
    Papio sp.                           1
    Pan troglodytes                     1
    Name: sample_host, dtype: int64

```python
# The quantile of the publication years
sample_df['publication_year'].quantile(np.arange(0,1,0.1))
```

    0.0    2014.0
    0.1    2017.0
    0.2    2018.0
    0.3    2018.0
    0.4    2020.0
    0.5    2020.0
    0.6    2020.0
    0.7    2021.0
    0.8    2021.0
    0.9    2021.0
    Name: publication_year, dtype: float64

```python
# We can also visualize it with built-in plot functions of pandas
sample_df['publication_year'].plot.hist()
```

    <AxesSubplot:ylabel='Frequency'>

![png](assets/images/chapters/python-pandas/tutorial_74_1.png)

## 6 - Filtering

There are different ways of filtering data with Pandas:

- The **classic** method with bracket indexing/subsetting
- The `query()` method

The classic method

```python
# Getting all the publications before 2015
sample_df[sample_df['publication_year']  < 2015 ]
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>project_name</th>
      <th>publication_year</th>
      <th>publication_doi</th>
      <th>site_name</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>geo_loc_name</th>
      <th>sample_name</th>
      <th>sample_host</th>
      <th>sample_age</th>
      <th>sample_age_doi</th>
      <th>community_type</th>
      <th>material</th>
      <th>archive</th>
      <th>archive_project</th>
      <th>archive_accession</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.84</td>
      <td>Germany</td>
      <td>B61</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473742,SRS473743,SRS473744,SRS473745</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.84</td>
      <td>Germany</td>
      <td>G12</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473747,SRS473746,SRS473748,SRS473749,SRS473750</td>
    </tr>
    <tr>
      <th>272</th>
      <td>Campana2014</td>
      <td>2014</td>
      <td>10.1186/1756-0500-7-111</td>
      <td>Teposcolula Yucundaa</td>
      <td>17.490</td>
      <td>-97.46</td>
      <td>Mexico</td>
      <td>TP4</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.7183/1045-6635.23.4.467</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>SRA</td>
      <td>PRJNA205039</td>
      <td>SRS428959</td>
    </tr>
    <tr>
      <th>273</th>
      <td>Campana2014</td>
      <td>2014</td>
      <td>10.1186/1756-0500-7-111</td>
      <td>Teposcolula Yucundaa</td>
      <td>17.490</td>
      <td>-97.46</td>
      <td>Mexico</td>
      <td>TP10</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.7183/1045-6635.23.4.467</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>SRA</td>
      <td>PRJNA205039</td>
      <td>SRS428961</td>
    </tr>
    <tr>
      <th>274</th>
      <td>Campana2014</td>
      <td>2014</td>
      <td>10.1186/1756-0500-7-111</td>
      <td>Teposcolula Yucundaa</td>
      <td>17.490</td>
      <td>-97.46</td>
      <td>Mexico</td>
      <td>TP18</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.7183/1045-6635.23.4.467</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>SRA</td>
      <td>PRJNA205039</td>
      <td>SRS428962</td>
    </tr>
    <tr>
      <th>275</th>
      <td>Campana2014</td>
      <td>2014</td>
      <td>10.1186/1756-0500-7-111</td>
      <td>Teposcolula Yucundaa</td>
      <td>17.490</td>
      <td>-97.46</td>
      <td>Mexico</td>
      <td>TP37</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.7183/1045-6635.23.4.467</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>SRA</td>
      <td>PRJNA205039</td>
      <td>SRS428963</td>
    </tr>
    <tr>
      <th>276</th>
      <td>Campana2014</td>
      <td>2014</td>
      <td>10.1186/1756-0500-7-111</td>
      <td>Teposcolula Yucundaa</td>
      <td>17.490</td>
      <td>-97.46</td>
      <td>Mexico</td>
      <td>TP9</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.7183/1045-6635.23.4.467</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>SRA</td>
      <td>PRJNA205039</td>
      <td>SRS428960</td>
    </tr>
    <tr>
      <th>277</th>
      <td>Campana2014</td>
      <td>2014</td>
      <td>10.1186/1756-0500-7-111</td>
      <td>Teposcolula Yucundaa</td>
      <td>17.490</td>
      <td>-97.46</td>
      <td>Mexico</td>
      <td>TP48</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.7183/1045-6635.23.4.467</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>SRA</td>
      <td>PRJNA205039</td>
      <td>SRS428964</td>
    </tr>
    <tr>
      <th>278</th>
      <td>Campana2014</td>
      <td>2014</td>
      <td>10.1186/1756-0500-7-111</td>
      <td>Teposcolula Yucundaa</td>
      <td>17.490</td>
      <td>-97.46</td>
      <td>Mexico</td>
      <td>TP02,TP10,TP15,TP26</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.7183/1045-6635.23.4.467</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>SRA</td>
      <td>PRJNA205039</td>
      <td>SRS428958</td>
    </tr>
    <tr>
      <th>279</th>
      <td>Campana2014</td>
      <td>2014</td>
      <td>10.1186/1756-0500-7-111</td>
      <td>Teposcolula Yucundaa</td>
      <td>17.490</td>
      <td>-97.46</td>
      <td>Mexico</td>
      <td>TP32,TP42,TP45,TP48</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.7183/1045-6635.23.4.467</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>SRA</td>
      <td>PRJNA205039</td>
      <td>SRS428972</td>
    </tr>
    <tr>
      <th>500</th>
      <td>Appelt2014</td>
      <td>2014</td>
      <td>10.1128/AEM.03242-13</td>
      <td>Place d'Armes, Namur</td>
      <td>50.460</td>
      <td>4.86</td>
      <td>Belgium</td>
      <td>4.453</td>
      <td>Homo sapiens</td>
      <td>600</td>
      <td>10.1128/AEM.03242-13</td>
      <td>gut</td>
      <td>palaeofaeces</td>
      <td>SRA</td>
      <td>PRJNA230469</td>
      <td>SRS510175</td>
    </tr>
  </tbody>
</table>
</div>

```python
# Getting all the publications before 2015, only in the Northern hemisphere
sample_df[(sample_df['publication_year']  < 2015) & (sample_df['longitude'] > 0)]
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>project_name</th>
      <th>publication_year</th>
      <th>publication_doi</th>
      <th>site_name</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>geo_loc_name</th>
      <th>sample_name</th>
      <th>sample_host</th>
      <th>sample_age</th>
      <th>sample_age_doi</th>
      <th>community_type</th>
      <th>material</th>
      <th>archive</th>
      <th>archive_project</th>
      <th>archive_accession</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.84</td>
      <td>Germany</td>
      <td>B61</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473742,SRS473743,SRS473744,SRS473745</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.84</td>
      <td>Germany</td>
      <td>G12</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473747,SRS473746,SRS473748,SRS473749,SRS473750</td>
    </tr>
    <tr>
      <th>500</th>
      <td>Appelt2014</td>
      <td>2014</td>
      <td>10.1128/AEM.03242-13</td>
      <td>Place d'Armes, Namur</td>
      <td>50.460</td>
      <td>4.86</td>
      <td>Belgium</td>
      <td>4.453</td>
      <td>Homo sapiens</td>
      <td>600</td>
      <td>10.1128/AEM.03242-13</td>
      <td>gut</td>
      <td>palaeofaeces</td>
      <td>SRA</td>
      <td>PRJNA230469</td>
      <td>SRS510175</td>
    </tr>
  </tbody>
</table>
</div>

This syntax can rapidly become quite cumbersome, which is why we can also use the `query()` method

```python
# Getting all the publications before 2015
sample_df.query("publication_year < 2015")
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>project_name</th>
      <th>publication_year</th>
      <th>publication_doi</th>
      <th>site_name</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>geo_loc_name</th>
      <th>sample_name</th>
      <th>sample_host</th>
      <th>sample_age</th>
      <th>sample_age_doi</th>
      <th>community_type</th>
      <th>material</th>
      <th>archive</th>
      <th>archive_project</th>
      <th>archive_accession</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.84</td>
      <td>Germany</td>
      <td>B61</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473742,SRS473743,SRS473744,SRS473745</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.84</td>
      <td>Germany</td>
      <td>G12</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473747,SRS473746,SRS473748,SRS473749,SRS473750</td>
    </tr>
    <tr>
      <th>272</th>
      <td>Campana2014</td>
      <td>2014</td>
      <td>10.1186/1756-0500-7-111</td>
      <td>Teposcolula Yucundaa</td>
      <td>17.490</td>
      <td>-97.46</td>
      <td>Mexico</td>
      <td>TP4</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.7183/1045-6635.23.4.467</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>SRA</td>
      <td>PRJNA205039</td>
      <td>SRS428959</td>
    </tr>
    <tr>
      <th>273</th>
      <td>Campana2014</td>
      <td>2014</td>
      <td>10.1186/1756-0500-7-111</td>
      <td>Teposcolula Yucundaa</td>
      <td>17.490</td>
      <td>-97.46</td>
      <td>Mexico</td>
      <td>TP10</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.7183/1045-6635.23.4.467</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>SRA</td>
      <td>PRJNA205039</td>
      <td>SRS428961</td>
    </tr>
    <tr>
      <th>274</th>
      <td>Campana2014</td>
      <td>2014</td>
      <td>10.1186/1756-0500-7-111</td>
      <td>Teposcolula Yucundaa</td>
      <td>17.490</td>
      <td>-97.46</td>
      <td>Mexico</td>
      <td>TP18</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.7183/1045-6635.23.4.467</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>SRA</td>
      <td>PRJNA205039</td>
      <td>SRS428962</td>
    </tr>
    <tr>
      <th>275</th>
      <td>Campana2014</td>
      <td>2014</td>
      <td>10.1186/1756-0500-7-111</td>
      <td>Teposcolula Yucundaa</td>
      <td>17.490</td>
      <td>-97.46</td>
      <td>Mexico</td>
      <td>TP37</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.7183/1045-6635.23.4.467</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>SRA</td>
      <td>PRJNA205039</td>
      <td>SRS428963</td>
    </tr>
    <tr>
      <th>276</th>
      <td>Campana2014</td>
      <td>2014</td>
      <td>10.1186/1756-0500-7-111</td>
      <td>Teposcolula Yucundaa</td>
      <td>17.490</td>
      <td>-97.46</td>
      <td>Mexico</td>
      <td>TP9</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.7183/1045-6635.23.4.467</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>SRA</td>
      <td>PRJNA205039</td>
      <td>SRS428960</td>
    </tr>
    <tr>
      <th>277</th>
      <td>Campana2014</td>
      <td>2014</td>
      <td>10.1186/1756-0500-7-111</td>
      <td>Teposcolula Yucundaa</td>
      <td>17.490</td>
      <td>-97.46</td>
      <td>Mexico</td>
      <td>TP48</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.7183/1045-6635.23.4.467</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>SRA</td>
      <td>PRJNA205039</td>
      <td>SRS428964</td>
    </tr>
    <tr>
      <th>278</th>
      <td>Campana2014</td>
      <td>2014</td>
      <td>10.1186/1756-0500-7-111</td>
      <td>Teposcolula Yucundaa</td>
      <td>17.490</td>
      <td>-97.46</td>
      <td>Mexico</td>
      <td>TP02,TP10,TP15,TP26</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.7183/1045-6635.23.4.467</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>SRA</td>
      <td>PRJNA205039</td>
      <td>SRS428958</td>
    </tr>
    <tr>
      <th>279</th>
      <td>Campana2014</td>
      <td>2014</td>
      <td>10.1186/1756-0500-7-111</td>
      <td>Teposcolula Yucundaa</td>
      <td>17.490</td>
      <td>-97.46</td>
      <td>Mexico</td>
      <td>TP32,TP42,TP45,TP48</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.7183/1045-6635.23.4.467</td>
      <td>skeletal tissue</td>
      <td>bone</td>
      <td>SRA</td>
      <td>PRJNA205039</td>
      <td>SRS428972</td>
    </tr>
    <tr>
      <th>500</th>
      <td>Appelt2014</td>
      <td>2014</td>
      <td>10.1128/AEM.03242-13</td>
      <td>Place d'Armes, Namur</td>
      <td>50.460</td>
      <td>4.86</td>
      <td>Belgium</td>
      <td>4.453</td>
      <td>Homo sapiens</td>
      <td>600</td>
      <td>10.1128/AEM.03242-13</td>
      <td>gut</td>
      <td>palaeofaeces</td>
      <td>SRA</td>
      <td>PRJNA230469</td>
      <td>SRS510175</td>
    </tr>
  </tbody>
</table>
</div>

```python
# Getting all the publications before 2015, only the Northern hemisphere
sample_df.query("publication_year < 2015 and longitude > 0 ")
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>project_name</th>
      <th>publication_year</th>
      <th>publication_doi</th>
      <th>site_name</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>geo_loc_name</th>
      <th>sample_name</th>
      <th>sample_host</th>
      <th>sample_age</th>
      <th>sample_age_doi</th>
      <th>community_type</th>
      <th>material</th>
      <th>archive</th>
      <th>archive_project</th>
      <th>archive_accession</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.84</td>
      <td>Germany</td>
      <td>B61</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473742,SRS473743,SRS473744,SRS473745</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.84</td>
      <td>Germany</td>
      <td>G12</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473747,SRS473746,SRS473748,SRS473749,SRS473750</td>
    </tr>
    <tr>
      <th>500</th>
      <td>Appelt2014</td>
      <td>2014</td>
      <td>10.1128/AEM.03242-13</td>
      <td>Place d'Armes, Namur</td>
      <td>50.460</td>
      <td>4.86</td>
      <td>Belgium</td>
      <td>4.453</td>
      <td>Homo sapiens</td>
      <td>600</td>
      <td>10.1128/AEM.03242-13</td>
      <td>gut</td>
      <td>palaeofaeces</td>
      <td>SRA</td>
      <td>PRJNA230469</td>
      <td>SRS510175</td>
    </tr>
  </tbody>
</table>
</div>

## 7 - GroupBy operations, and computing statistics on grouped values

The "groupBy" operation, as the name suggests, allows us to group values by a grouping key, and perform a groupwise operation.  
For example, we can group by the `sample_host` and get the age of the **youngest** sample in each group

```python
sample_df.groupby("sample_host")['sample_age'].min()
```

    sample_host
    Alouatta palliata                   200
    Ambrosia artemisiifolia             100
    Arabidopsis thaliana                100
    Canis lupus                         400
    Conepatus chinga                    100
    Gerbilliscus boehmi                 100
    Gorilla beringei                    100
    Gorilla beringei beringei           200
    Gorilla beringei graueri            200
    Gorilla gorilla gorilla             200
    Homo sapiens                        100
    Homo sapiens neanderthalensis     35800
    Mammuthus primigenius             41800
    Pan troglodytes                     100
    Pan troglodytes ellioti             200
    Pan troglodytes schweinfurthii      100
    Pan troglodytes verus               200
    Papio anubis                        100
    Papio hamadryas                     100
    Papio sp.                           100
    Rangifer tarandus                   100
    Strigocuscus celebensis             100
    Ursus arctos                        100
    Name: sample_age, dtype: int64

Here `min()` is a so-called aggregation function

Notice that `.value_counts()` is actually a special case of `.groupby()`

```python
sample_df.groupby("sample_host")["sample_host"].count()
```

    sample_host
    Alouatta palliata                   5
    Ambrosia artemisiifolia            46
    Arabidopsis thaliana               34
    Canis lupus                        12
    Conepatus chinga                    4
    Gerbilliscus boehmi                 4
    Gorilla beringei                    2
    Gorilla beringei beringei          15
    Gorilla beringei graueri            6
    Gorilla gorilla gorilla             8
    Homo sapiens                      741
    Homo sapiens neanderthalensis      32
    Mammuthus primigenius               8
    Pan troglodytes                     1
    Pan troglodytes ellioti             6
    Pan troglodytes schweinfurthii     26
    Pan troglodytes verus               7
    Papio anubis                        2
    Papio hamadryas                     5
    Papio sp.                           1
    Rangifer tarandus                   6
    Strigocuscus celebensis             4
    Ursus arctos                       85
    Name: sample_host, dtype: int64

## 8 - Reshaping data, from wide to long and back

![](assets/images/chapters/python-pandas/The-wide-versus-tidy-data-format-In-the-wide-spreadsheet-like-data-format-each-column.png)

### From wide to long/tidy

The tidy format, or long format idea is that one column = one kind of data.  
Unfortunately for this tutorial, the AncientMetagenomeDir tables are already in the tidy format (good), so we'll see an example or the wide format just below

```python
wide_df = pd.DataFrame(
    [
    [150,155,157,160],
    [149,153,154,155]
    ]
    , index = ['John','Jack']
    , columns = [1991,1992,1993, 1994]
).rename_axis('individual').reset_index()
wide_df
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>individual</th>
      <th>1991</th>
      <th>1992</th>
      <th>1993</th>
      <th>1994</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>John</td>
      <td>150</td>
      <td>155</td>
      <td>157</td>
      <td>160</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Jack</td>
      <td>149</td>
      <td>153</td>
      <td>154</td>
      <td>155</td>
    </tr>
  </tbody>
</table>
</div>

In this hypothetic dataframe, we have the years as column, the individual as index, and their height as value.  
We'll reformat to the tidy/long format using the `.melt()` function

```python
tidy_df = wide_df.melt(id_vars='individual', var_name='birthyear', value_name='height')
tidy_df
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>individual</th>
      <th>birthyear</th>
      <th>height</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>John</td>
      <td>1991</td>
      <td>150</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Jack</td>
      <td>1991</td>
      <td>149</td>
    </tr>
    <tr>
      <th>2</th>
      <td>John</td>
      <td>1992</td>
      <td>155</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Jack</td>
      <td>1992</td>
      <td>153</td>
    </tr>
    <tr>
      <th>4</th>
      <td>John</td>
      <td>1993</td>
      <td>157</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Jack</td>
      <td>1993</td>
      <td>154</td>
    </tr>
    <tr>
      <th>6</th>
      <td>John</td>
      <td>1994</td>
      <td>160</td>
    </tr>
    <tr>
      <th>7</th>
      <td>Jack</td>
      <td>1994</td>
      <td>155</td>
    </tr>
  </tbody>
</table>
</div>

> Bonus: How to deal with a dataframe with the kind of data indicated in the column name, typically like so

```python
wide_df = pd.DataFrame(
    [
    [150,155,157,160],
    [149,153,154,155]
    ]
    , index = ['John','Jack']
    , columns = ["year-1991","year-1992","year-1993", "year-1994"]
).rename_axis('individual').reset_index()
wide_df
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>individual</th>
      <th>year-1991</th>
      <th>year-1992</th>
      <th>year-1993</th>
      <th>year-1994</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>John</td>
      <td>150</td>
      <td>155</td>
      <td>157</td>
      <td>160</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Jack</td>
      <td>149</td>
      <td>153</td>
      <td>154</td>
      <td>155</td>
    </tr>
  </tbody>
</table>
</div>

```python
pd.wide_to_long(wide_df, ['year'], i='individual', j='birthyear', sep="-").rename(columns={'year':'height'})
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>height</th>
    </tr>
    <tr>
      <th>individual</th>
      <th>birthyear</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>John</th>
      <th>1991</th>
      <td>150</td>
    </tr>
    <tr>
      <th>Jack</th>
      <th>1991</th>
      <td>149</td>
    </tr>
    <tr>
      <th>John</th>
      <th>1992</th>
      <td>155</td>
    </tr>
    <tr>
      <th>Jack</th>
      <th>1992</th>
      <td>153</td>
    </tr>
    <tr>
      <th>John</th>
      <th>1993</th>
      <td>157</td>
    </tr>
    <tr>
      <th>Jack</th>
      <th>1993</th>
      <td>154</td>
    </tr>
    <tr>
      <th>John</th>
      <th>1994</th>
      <td>160</td>
    </tr>
    <tr>
      <th>Jack</th>
      <th>1994</th>
      <td>155</td>
    </tr>
  </tbody>
</table>
</div>

### From long/tidy to wide format using the `.pivot()` function.

```python
tidy_df.pivot(index='individual', columns='birthyear', values='height')
```

    /Users/maxime/mambaforge/envs/intro-data/lib/python3.10/site-packages/pandas/core/algorithms.py:798: FutureWarning: In a future version, the Index constructor will not infer numeric dtypes when passed object-dtype sequences (matching Series behavior)

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>birthyear</th>
      <th>1991</th>
      <th>1992</th>
      <th>1993</th>
      <th>1994</th>
    </tr>
    <tr>
      <th>individual</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Jack</th>
      <td>149</td>
      <td>153</td>
      <td>154</td>
      <td>155</td>
    </tr>
    <tr>
      <th>John</th>
      <td>150</td>
      <td>155</td>
      <td>157</td>
      <td>160</td>
    </tr>
  </tbody>
</table>
</div>

## 9 - Joining two different tables

In AncientMetagenomeDir, the information about each sample is located in sample table, and about the library in the library table.  
To match these two together, we need to join the tables together.

To do so, we need a column in common between the two tables, the so-called **joining key** (this key can be the index)

![](assets/images/chapters/python-pandas/08_merge_left.svg)

For the samples and libraries dataframe, the joining key is the column `sample_name`

```python
sample_df.merge(library_df, on='sample_name').columns
```

    Index(['project_name_x', 'publication_year_x', 'publication_doi', 'site_name',
           'latitude', 'longitude', 'geo_loc_name', 'sample_name', 'sample_host',
           'sample_age', 'sample_age_doi', 'community_type', 'material',
           'archive_x', 'archive_project_x', 'archive_accession', 'project_name_y',
           'publication_year_y', 'data_publication_doi', 'archive_y',
           'archive_project_y', 'archive_sample_accession', 'library_name',
           'strand_type', 'library_polymerase', 'library_treatment',
           'library_concentration', 'instrument_model', 'library_layout',
           'library_strategy', 'read_count', 'archive_data_accession',
           'download_links', 'download_md5s', 'download_sizes'],
          dtype='object')

We have some duplicate columns that we can get rid of:

```python
merged_df = sample_df.merge(library_df.drop(['project_name', 'publication_year', 'archive_project', 'archive'], axis=1), on='sample_name')
merged_df
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>project_name</th>
      <th>publication_year</th>
      <th>publication_doi</th>
      <th>site_name</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>geo_loc_name</th>
      <th>sample_name</th>
      <th>sample_host</th>
      <th>sample_age</th>
      <th>...</th>
      <th>library_treatment</th>
      <th>library_concentration</th>
      <th>instrument_model</th>
      <th>library_layout</th>
      <th>library_strategy</th>
      <th>read_count</th>
      <th>archive_data_accession</th>
      <th>download_links</th>
      <th>download_md5s</th>
      <th>download_sizes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.84</td>
      <td>Germany</td>
      <td>B61</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>...</td>
      <td>none</td>
      <td>NaN</td>
      <td>Illumina HiSeq 2000</td>
      <td>SINGLE</td>
      <td>WGS</td>
      <td>13228381</td>
      <td>SRR957738</td>
      <td>ftp.sra.ebi.ac.uk/vol1/fastq/SRR957/SRR957738/...</td>
      <td>9c40c43b5d455e760ae8db924347f0b2</td>
      <td>953396663</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.84</td>
      <td>Germany</td>
      <td>B61</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>...</td>
      <td>none</td>
      <td>NaN</td>
      <td>Illumina HiSeq 2000</td>
      <td>SINGLE</td>
      <td>WGS</td>
      <td>13260566</td>
      <td>SRR957739</td>
      <td>ftp.sra.ebi.ac.uk/vol1/fastq/SRR957/SRR957739/...</td>
      <td>dec1507f742de109529638bf00e0732f</td>
      <td>1026825795</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.84</td>
      <td>Germany</td>
      <td>B61</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>...</td>
      <td>none</td>
      <td>NaN</td>
      <td>Illumina HiSeq 2000</td>
      <td>SINGLE</td>
      <td>WGS</td>
      <td>8869866</td>
      <td>SRR957740</td>
      <td>ftp.sra.ebi.ac.uk/vol1/fastq/SRR957/SRR957740/...</td>
      <td>bc49c59f489b4009206f8abcb737d55d</td>
      <td>661500786</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.84</td>
      <td>Germany</td>
      <td>B61</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>...</td>
      <td>none</td>
      <td>NaN</td>
      <td>Illumina HiSeq 2000</td>
      <td>SINGLE</td>
      <td>WGS</td>
      <td>11275013</td>
      <td>SRR957741</td>
      <td>ftp.sra.ebi.ac.uk/vol1/fastq/SRR957/SRR957741/...</td>
      <td>e02e3549ddd3ba6dc278a7f573c07321</td>
      <td>877360302</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.84</td>
      <td>Germany</td>
      <td>G12</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>...</td>
      <td>none</td>
      <td>NaN</td>
      <td>Illumina HiSeq 2000</td>
      <td>SINGLE</td>
      <td>WGS</td>
      <td>8978974</td>
      <td>SRR957742</td>
      <td>ftp.sra.ebi.ac.uk/vol1/fastq/SRR957/SRR957742/...</td>
      <td>b7c620b8ee165c08bee204529341ca5b</td>
      <td>690614774</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1802</th>
      <td>Maixner2021</td>
      <td>2021</td>
      <td>10.1016/j.cub.2021.09.031</td>
      <td>Edlersbergwerk - oben, Hallstatt</td>
      <td>47.560</td>
      <td>13.63</td>
      <td>Austria</td>
      <td>2612</td>
      <td>Homo sapiens</td>
      <td>150</td>
      <td>...</td>
      <td>none</td>
      <td>NaN</td>
      <td>Illumina MiSeq</td>
      <td>PAIRED</td>
      <td>WGS</td>
      <td>1858404</td>
      <td>ERR5766179</td>
      <td>ftp.sra.ebi.ac.uk/vol1/fastq/ERR576/009/ERR576...</td>
      <td>542787c645b0aeebe15c66cc926d3f69;0bc58d56be3c3...</td>
      <td>86783041;98100690</td>
    </tr>
    <tr>
      <th>1803</th>
      <td>Maixner2021</td>
      <td>2021</td>
      <td>10.1016/j.cub.2021.09.031</td>
      <td>Edlersbergwerk - oben, Hallstatt</td>
      <td>47.560</td>
      <td>13.63</td>
      <td>Austria</td>
      <td>2612</td>
      <td>Homo sapiens</td>
      <td>150</td>
      <td>...</td>
      <td>none</td>
      <td>NaN</td>
      <td>Illumina MiSeq</td>
      <td>PAIRED</td>
      <td>WGS</td>
      <td>1603064</td>
      <td>ERR5766180</td>
      <td>ftp.sra.ebi.ac.uk/vol1/fastq/ERR576/000/ERR576...</td>
      <td>022bb28da460e66590e974b4135bdd2e;f88acec67b648...</td>
      <td>74375931;77621627</td>
    </tr>
    <tr>
      <th>1804</th>
      <td>Maixner2021</td>
      <td>2021</td>
      <td>10.1016/j.cub.2021.09.031</td>
      <td>Edlersbergwerk - oben, Hallstatt</td>
      <td>47.560</td>
      <td>13.63</td>
      <td>Austria</td>
      <td>2612</td>
      <td>Homo sapiens</td>
      <td>150</td>
      <td>...</td>
      <td>none</td>
      <td>NaN</td>
      <td>Illumina MiSeq</td>
      <td>PAIRED</td>
      <td>WGS</td>
      <td>1075088</td>
      <td>ERR5766181</td>
      <td>ftp.sra.ebi.ac.uk/vol1/fastq/ERR576/001/ERR576...</td>
      <td>57fc575d32db14f1d5c1ed7f6a106e91;4f57b9d978b53...</td>
      <td>51852071;56288763</td>
    </tr>
    <tr>
      <th>1805</th>
      <td>Maixner2021</td>
      <td>2021</td>
      <td>10.1016/j.cub.2021.09.031</td>
      <td>Edlersbergwerk - oben, Hallstatt</td>
      <td>47.560</td>
      <td>13.63</td>
      <td>Austria</td>
      <td>2612</td>
      <td>Homo sapiens</td>
      <td>150</td>
      <td>...</td>
      <td>none</td>
      <td>NaN</td>
      <td>Illumina HiSeq 2500</td>
      <td>PAIRED</td>
      <td>WGS</td>
      <td>138836358</td>
      <td>ERR5766182</td>
      <td>ftp.sra.ebi.ac.uk/vol1/fastq/ERR576/002/ERR576...</td>
      <td>64e63df8da7542957d1d9eb08e764d38;3fc6cba02c74d...</td>
      <td>4332353625;4420486328</td>
    </tr>
    <tr>
      <th>1806</th>
      <td>Maixner2021</td>
      <td>2021</td>
      <td>10.1016/j.cub.2021.09.031</td>
      <td>Edlersbergwerk - oben, Hallstatt</td>
      <td>47.560</td>
      <td>13.63</td>
      <td>Austria</td>
      <td>2612</td>
      <td>Homo sapiens</td>
      <td>150</td>
      <td>...</td>
      <td>none</td>
      <td>NaN</td>
      <td>HiSeq X Ten</td>
      <td>PAIRED</td>
      <td>WGS</td>
      <td>84192332</td>
      <td>ERR5766183</td>
      <td>ftp.sra.ebi.ac.uk/vol1/fastq/ERR576/003/ERR576...</td>
      <td>43ac661c4e211ed6ee2940dcab8b13cb;88de66a85df92...</td>
      <td>3128863954;3460789287</td>
    </tr>
  </tbody>
</table>
<p>1807 rows × 31 columns</p>
</div>

## 10 - Visualizing some of the results with Plotnine

Plotnine is the Python clone of ggplot2, the syntax is identical, which makes it great if you're working with data in tidy/long format, and are already familiar with the ggplot2 syntax

```python
ggplot(merged_df, aes(x='publication_year')) + geom_histogram() + theme_classic()
```

    /Users/maxime/mambaforge/envs/intro-data/lib/python3.10/
    site-packages/plotnine/stats/stat_bin.py:95:
    PlotnineWarning: 'stat_bin()' using 'bins = 15'. Pick better value with 'binwidth'.

![png](assets/images/chapters/python-pandas/tutorial_111_1.png)

    <ggplot: (366051178)>

We can start to ask some questions, for example, is the sequencing depth increasing with the years ?

```python
merged_df['publication_year'] = merged_df['publication_year'].astype('category')
```

```python
ggplot(merged_df, aes(x='publication_year', y='np.log10(read_count)', fill='publication_year')) +
geom_jitter(alpha=0.1) + geom_boxplot(alpha=0.8) + theme_classic()
```

![png](assets/images/chapters/python-pandas/tutorial_114_0.png)

    <ggplot: (366112582)>

We could ask the same question, but first grouping the samples by publication year

```python
avg_read_count_by_year = merged_df.groupby('publication_year')['read_count'].mean().to_frame().reset_index()
avg_read_count_by_year
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>publication_year</th>
      <th>read_count</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2014</td>
      <td>1.437173e+07</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2016</td>
      <td>3.653450e+04</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2017</td>
      <td>5.712598e+06</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2018</td>
      <td>9.273287e+06</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2019</td>
      <td>2.211632e+07</td>
    </tr>
    <tr>
      <th>5</th>
      <td>2020</td>
      <td>1.111819e+07</td>
    </tr>
    <tr>
      <th>6</th>
      <td>2021</td>
      <td>2.547655e+07</td>
    </tr>
  </tbody>
</table>
</div>

```python
ggplot(avg_read_count_by_year, aes(x='publication_year', y='np.log10(read_count)', fill='publication_year')) + geom_point()
```

![png](assets/images/chapters/python-pandas/tutorial_117_0.png)

    <ggplot: (366206706)>

**Your turn ! Make a plot to investigate the relation between the type of library treatment throughout the publication years**

## 11 - Bonus, dealing with ill-formatted columns

Sometimes, colums can contains entries which could be split in multiple columns, typically values separated by a comma.
In AncientMetagenomeDir, this is the case with the archive accession column.

Here is how we would solve it with pandas

```python
sample_df.assign(archive_accession = sample_df.archive_accession.str.split(",")).explode('archive_accession')
```

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>project_name</th>
      <th>publication_year</th>
      <th>publication_doi</th>
      <th>site_name</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>geo_loc_name</th>
      <th>sample_name</th>
      <th>sample_host</th>
      <th>sample_age</th>
      <th>sample_age_doi</th>
      <th>community_type</th>
      <th>material</th>
      <th>archive</th>
      <th>archive_project</th>
      <th>archive_accession</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.840</td>
      <td>Germany</td>
      <td>B61</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473742</td>
    </tr>
    <tr>
      <th>0</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.840</td>
      <td>Germany</td>
      <td>B61</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473743</td>
    </tr>
    <tr>
      <th>0</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.840</td>
      <td>Germany</td>
      <td>B61</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473744</td>
    </tr>
    <tr>
      <th>0</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.840</td>
      <td>Germany</td>
      <td>B61</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473745</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Warinner2014</td>
      <td>2014</td>
      <td>10.1038/ng.2906</td>
      <td>Dalheim</td>
      <td>51.565</td>
      <td>8.840</td>
      <td>Germany</td>
      <td>G12</td>
      <td>Homo sapiens</td>
      <td>900</td>
      <td>10.1038/ng.2906</td>
      <td>oral</td>
      <td>dental calculus</td>
      <td>SRA</td>
      <td>PRJNA216965</td>
      <td>SRS473747</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1057</th>
      <td>Kazarina2021b</td>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>St. Gertrude’s Church, Riga</td>
      <td>56.958</td>
      <td>24.121</td>
      <td>Latvia</td>
      <td>T9</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283099</td>
    </tr>
    <tr>
      <th>1058</th>
      <td>Kazarina2021b</td>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>Dom Square, Riga</td>
      <td>56.949</td>
      <td>24.104</td>
      <td>Latvia</td>
      <td>TZA3</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283100</td>
    </tr>
    <tr>
      <th>1058</th>
      <td>Kazarina2021b</td>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>Dom Square, Riga</td>
      <td>56.949</td>
      <td>24.104</td>
      <td>Latvia</td>
      <td>TZA3</td>
      <td>Homo sapiens</td>
      <td>400</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283101</td>
    </tr>
    <tr>
      <th>1059</th>
      <td>Kazarina2021b</td>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>St. Peter’s Church, Riga</td>
      <td>56.947</td>
      <td>24.109</td>
      <td>Latvia</td>
      <td>TZA4</td>
      <td>Homo sapiens</td>
      <td>500</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283102</td>
    </tr>
    <tr>
      <th>1059</th>
      <td>Kazarina2021b</td>
      <td>2021</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>St. Peter’s Church, Riga</td>
      <td>56.947</td>
      <td>24.109</td>
      <td>Latvia</td>
      <td>TZA4</td>
      <td>Homo sapiens</td>
      <td>500</td>
      <td>10.1016/j.jasrep.2021.103213</td>
      <td>oral</td>
      <td>tooth</td>
      <td>ENA</td>
      <td>PRJEB47251</td>
      <td>ERS7283103</td>
    </tr>
  </tbody>
</table>
<p>1262 rows × 16 columns</p>
</div>